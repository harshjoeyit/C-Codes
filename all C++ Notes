>>>>>> std::sort - 

A hybrid sorting algorithm provides average and worst case time complexity of O(nlogn). The sorting algorithm which it uses is called Introsort.
Introsort is combination of both quicksort and heapsort, It begins with quicksort and switch to heapsort if recursion depth exceeds a level based on the number of elements being sorted.

sort() function usually uses Introsort. Therefore, sort() may preserve the physical order of semantically equivalent values but can’t be guaranteed.

stable_sort() function usually uses mergesort. Therefore, stable_sort() preserve the physical order of semantically equivalent values and its guaranteed.




>>>>> cross initialization error -

Occurs when variables are declared in case in the switch.
To remove error use a block {} to enclose the variables declared. 




>>>>>> container adapters-

both stack and queues are container adapters and implemented on deque
priorirty queue is implemented on a vector 




>>>>>> minimum required to compile a file -

int main() { }




>>>>>> Statement

We know that every statement in C++ must end with a semicolon. However, unlike other languages, almost all statements in C++ can be treated as expressions. So, if we place the statement inside an if statement with a blank pair of parentheses, we don’t have to end it with a semicolon anymore.

if (a = 1) {}
if (printf("Hello, world!\n")) {}

If we want to call a function that returns void, we cannot use that trick, as void functions are not expressions. But it can be remedied using the not so famous comma operator, with any value in the right hand side of the operator.



>>>> constexpr

used while defining a function
increases compile time but reduces the run time 
ans is calculated at the compile time only  



>>>> constexpr vs inline functions

Both are for performance improvements, inline functions request 
compiler to expand at compile time and save time of 
function call overheads. In inline functions, expressions 
are always evaluated at run time. constexpr is different, 
here expressions are evaluated at compile time.



>>>> constexpr vs const

They serve different purposes. 
constexpr is mainly for optimization 
while const is for practically const objects like value of Pi.

Both of them can be applied to member methods. 

Member methods are made const to make sure that there are no accidental changes by 
the method. 

On the other hand, the idea of using constexpr is to 
compute expressions at compile time so that time can be saved when code is run.

const can only be used with non-static member function whereas 

constexpr can be used with member and non-member functions, even 
with constructors but with condition that argument and return type 
must be of literal types




>>>>> Why is scanf faster than cin?

On a high level both of them are wrappers over theread() system call, just syntactic sugar. 
The only visible difference is that scanf() has to explicitly declare the input type, 
whereas cin has the redirection operation overloaded using templates. This does not seem 
\like a good enough reason for a performance hit of 5x.

It turns out that iostream makes use of stdio‘s buffering system. So, cin wastes time 
synchronizing itself with the underlying C-library’s stdio buffer, so that calls to 
both scanf()and cin can be interleaved.

The good thing is that libstdc++ provides an option to turn off synchronization
of all the iostream standard streams with their corresponding standard C streams using
std::ios::sync_with_stdio(false);
and cin becomes faster than scanf() as it should have been.

NOTE: 
With synchronization turned off, using cin and scanf() together will result in an undefined mess.
With synchronization turned off, the above results indicate that cin is 8-10% faster than scanf(). 
This is probably because scanf() interprets the format arguments at runtime and makes use of 
variable number of arguments, whereas cin does this at compile time.




>>>> what is sync_with_stdio(false), cin.tie(null);

This is to synchronize IOs from C and C++ world. If you synchronize, then you have a guaranty that 
the orders of all IOs is exactly what you expect. In general, the problem is the buffering of IOs 
that causes the problem, synchronizing let both worlds to share the same buffers. For example 
cout << "Hello"; printf("World"); cout << "Ciao";; without synchronization you'll never know if you'll 
get HelloCiaoWorld or HelloWorldCiao or WorldHelloCiao...

`tie` lets you have the guaranty that IOs channels in C++ world are tied one to each other, which means 
for example that every output have been flushed before inputs occurs 
(think about cout << "What's your name ?"; cin >> name;).



>>>> How cin and cout work?

https://stackoverflow.com/questions/36914079/how-does-cin-work

By default, doing cin >> x means:
From the point currently in the stream, skip any whitespace which might be there 
and then keep reading as long as possible & necessary to get a valid representation of x.


cin and cout are buffered streams. Both 'a' and 'b' goes into the input buffer when you press enter. 
The '>>' operator reads from that buffer (one char at a time in your case). The '<<' writes to the 
output buffer. The only thing that should surprise you is that you see "ab" on output without printing 
"\n" (the latter symbol should flush the contents of the output buffer to the terminal).

In short, both cin and cout are buffers. Input and output operators work with those buffers. 
Newline symbol initiates the data transfer from real input to input buffer and from output 
buffer to the real output.

cin overloads `>>` for all kinds of input 
cout overloads `<<` for all kinds of output vars 

`<<` & `>>` can be overloaded by user defined classes too 
then cin >> obj would become valid  








.............................................................................


